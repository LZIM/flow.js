// color variable map
$typeMap: (
    input: (
        bind: (
            type: (
                background-color: #1f78b4,
                color: white
            ),
            val: (
                background-color: #a6cee3,
                color: rgb(51, 51, 51)
            ),
            conv: (
                background-color: #7794A3,
                color: white
            )
        ),
        on: (
            type: (
                background-color: #d7301f,
                color: white
            ),
            val: (
                background-color: #f768a1,
                color: white,
                border-right: 1px solid #d7301f
            )
        )
    ),
    output: (
        bind: (
            type: (
                background-color: #33a02c,
                color: white
            ),
            val: (
                background-color: #b2df8a,
                color: rgb(51, 51, 51)
            ),
            conv: (
                background-color: #D9FFB7
            )
        ),
        foreach: (
            type: (
                background-color: #AB8724,
                color: white
            ),
            val: (
                background-color: #F8CA4D,
                color: rgb(51, 51, 51)
            ),
            conv: (
                background-color: #FFD769
            )
        ),
        custom: (
            type: (
                background-color: #704623,
                color: white
            ),
            val: (
                background-color: #BD6C28,
                color: white
            ),
            conv: (
                background-color: #BD804D
            )
        )
    )
);

@each $type, $byType in $typeMap {
    .f-#{$type} {
        @each $attrName, $bySubtype in $byType {
            &.f-#{$attrName}, .f-#{$attrName} {
                @each $displayType, $attrMap in $bySubtype {
                    .f-#{$displayType} {
                        @each $attr, $val in $attrMap {
                            #{$attr}: #{$val}
                        }
                    }
                }
            }
        }
    }
}

//Toggle
@each $type, $byType in $typeMap {
    @each $attrName, $bySubtype in $byType {
        .hide-f-#{$type}-#{$attrName} {
            .f-item-containers {
                .f-#{$type}.f-#{$attrName}, .f-#{$type} .f-#{$attrName} {
                    opacity: 0;
                }
            }
            .f-legend-panel .f-#{$attrName} {
                opacity: 1 !important;
            }
        }
    }
}

.f-input, .f-output {
    span {
        padding: 2px 4px;
        display: inline-block;
        vertical-align: middle;
        white-space: nowrap;
    }
}

.f-item-containers {
    > div {
        position: absolute;
        z-index: 11;

        &:hover {
            z-index: 12;
        }
        > div {
            display: inline-block;
            transition: opacity 0.2s ease-in-out;

            span {
                box-shadow: 4px 0px 4px 0px rgba(50, 50, 50, 0.3);
            }

            .f-type, .f-conv {
                max-width: 0;
                overflow: hidden;
                padding-right: 0;

                text-transform: capitalize;
                transition: max-width 0.2s ease-in-out;
                transition: padding 0.1s ease-in-out;
            }
            .f-val {
                max-width: 135px;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            &:hover {
                .f-type, .f-conv {
                    max-width: 75px;
                    padding-right: 4px;
                }
                .f-val {
                    max-width: initial;
                }
            }
        }
    }
}

.f-legend-panel {
    background: white;
    padding: 5px 10px;
    position: fixed;
    left: 10px;
    top: 10px;
    cursor: move;
    border-radius: 3px;

    z-index: 99999;
    box-shadow: 4px 0px 4px 0px rgba(50, 50, 50, 0.3);

    label {
        display: block;
        font-weight: normal;
        cursor: pointer;
        div, input {
            display: inline-block;
            margin-right: 10px;
        }
        span {
            margin-right: -4px;
        }
    }
}

canvas.f-modal {
    top: 0;
    left: 0;
    position: absolute;
    z-index: 10;
    pointer-events: none;
}

